use gib_mod::another

struct Thing {
  name: String,
  age: Int,
}

trait Magic
trait Epic
trait Spooky

struct Test

impl Magic for Test
impl Epic for Test


impl Magic for Thing {
  fn do_magic() {
    println("Magic!")
  }
}

impl Epic for Thing {
  fn do_epic() {
    println("Epic!")
  }
}

impl Spooky for Thing {
  fn do_spooky() {
    println("Spooky!")
  }
}

enum Option[out T] {
  Some(T),
  None,
}

struct Test2 {
  name: another::Test3,
  age: Magic,
}


fn main() {
  let option: Option[Int] = Option::None
  let thing = match option {
    Option::Some(x) => Thing("Bob", x),
    Option::None => Test,
  }
  let thing2: String = thing
}

