
struct Thing {
  name: String,
  age: Int,
}

trait Magic
trait Epic

struct Test

impl Magic for Test
impl Epic for Test


impl Magic for Thing {
  fn do_magic() {
    println("Magic!")
  }
}

impl Epic for Thing {
  fn do_epic() {
    println("Epic!")
  }
}

enum Option[out T] {
  Some(T),
  None,
}


fn my_tuple(): (String, String) {
  
}


fn String.to_string(): String {

}

fn test(hello: String, world: Int): Thing {
}

trait Display {
  fn Self.to_string(): String
}

fn print_string(text: String)

fn print[T: Display](item: T) {
  print_string(123.my_tuple())
}

fn main() {
  let thing = Option::Some("Thing")
  let text: String = thing
}

