use std::String
use std::Int
use std::Float
use std::println
use std::print
use std::Option
use std::Result
use std::panic
use std::Bool

trait Test {
    fn another[T]() {
        let test = 123
        println(test)
    }
}

struct Box[T](T)

trait New {
    fn new(): Self
}

fn test() {}

impl[T] New for Box[T] {
    fn new(): Box[T] {
        Box(x)
    }
}

trait Pushable[T] {
    fn Self.push(x: T)
}

impl[U] Pushable[U] for Box[U] {
    fn Self.push(x: U) {
        println("Pushed")
    }
}

impl From[Int] for String {
    fn from(value: Int): String {
        "Hello"
    }
}

impl From[String] for Int {
    fn from(value: String): Int {
        123
    }
}

impl[T] std::Option[T] {

}

struct Basic {
    test: Int,
    test2: String
}

fn thingy(x: Option[String]) {
    let basic = Basic(123, "hello")
    let some_basic = Option::Some(basic)
}

fn test3(thing: Int) {
    let some = Option::Some(thing)
    some.unwrap()
}

fn test123() {
    let test = std::Vec
    test.push(123)
}

impl ToString for Basic {
    fn Self.to_string(): String {
        "Hello"
    }
}

impl ToString {
    fn print() {
        println("Hello")
    }
}

trait ToString {
    fn Self.to_string(): String
}

trait Clone {
    fn Self.clone(): Self
}

impl Clone for Basic {
    fn Self.clone(): Basic {
        let test = ""
        self
    }
}

impl ToString for Option[String] {
    fn Self.to_string(): String {
        match self {
            Option::Some(res) => res,
            Option::None => "None"
        }
    }
}

trait Into[T] {
    fn Self.into(): T
}

trait From[T] {
    fn from(value: T): Self
}

impl From[String] for Basic {
    fn from(value: String): Self {
        Basic(123, value)
    }
    fn broken(test: String) {
        println("Hello")
    }
}

impl Into[String] for Basic {
    fn Basic.into(): String {
        self.to_string()
    }
}

trait Eq {
    fn Self.eq(other: Self): Bool
}

impl Eq for Basic {
    fn Self.eq(other: Self): Bool {
        self.test == other.test
    }
}

impl[T] Option[T] {
    fn Self.unwrap(): T {
        match self {
            Option::Some(res) => res,
            Option::None => panic("Unwrapped None")
        }
    }
}

fn main() {
    let x = Option::None
    let y = x.unwrap()
    let Option::Some(z) = y
    1.add(z)
}
