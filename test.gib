use std::String
use std::Int

use std::println
use std::print

use std::Option
use std::Result

trait Test {
  fn test(): String {
    "Hello"
  }
}

fn simple[T](thing: T, some: String): Option[T]{
  let res = Option::None
  res
}


struct Box[T](T)

fn test(thing: Test) {
  let other = 123
}


fn thingy(x: Option[String]) {

}

fn main() {
  let test: Option[String] = Option::Some("")
  let tuple: (Int, String) -> String = 1
  let test2 = Option::Some("Hello")
  let x = test3
  let thing = match test {
    Option::Some(x) => x,
    Option::None => "String",
  }
  let my_enum = gib_mod::another::MyEnum::Second(123)
  let test2 = Option::Some(123)
  gib_mod::another::Test("Hello")
  let test = Option::Some("Hello")
  test2
  test
}

fn

fn test3(thing: Int) {
}

struct New[T] { test: T, test2: String }
