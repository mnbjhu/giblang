
struct Thing {
  name: String,
  age: Int,
}

trait Magic
trait Epic

struct Test

impl Magic for Test
impl Epic for Test


impl Magic for Thing {
  fn do_magic() {
    println("Magic!")
  }
}

impl Epic for Thing {
  fn do_epic() {
    println("Epic!")
  }
}

enum Option {
  Some(String),
  None,
}

fn my_tuple(): (String, String) {
  
}


fn test(hello: String, world: Int): Thing {
}

fn main() {
  let test = Option::Some("Thing")
  let test2: Test = Test
  let thing: Magic + Epic = match test {
    Option::None => {
      test2
    },
    Option::Some(thing) => {
      Thing("hello", 123)
    },
  }
}

