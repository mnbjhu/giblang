use std::String
use std::Int
use std::println
use std::print
use std::Option
use std::Result

trait Test {
    fn test(): String {}
    fn another()
}

fn simple[T](thing: T, some: String): Option[T] {
    let res = Option::None
    res
}

struct Box[T](T)

fn test(thing: Test) {
    let other = 123
}

fn thingy(x: Option[String]) {}

fn main() {
    let test: Option[String] = Option::Some("")
    let tuple: (Int, String) -> String = 1
    let test2 = Option::Some("Hello")
    let x = test3
    let thing = match test {
        Option::Some(x) => x,
        Option::None => "example"
    }
    let my_enum = gib_mod::another::MyEnum::Second(123)
    let test2 = Option::Some(123)
    gib_mod::another::Test("Hello")
    let test = Option::Some("Hello")
    test2
    test
    test3(123)
}

fn test3(thing: Int) {}

impl Test for New {
    fn another()
}

struct New[T] { test: T, test2: String, test3: String }
