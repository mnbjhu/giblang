permissions:
  contents: write
  issues: write
  checks: write
  pull-requests: write

name: Test with Code Coverage
#
# jobs:
#   test:
#     name: Test
#     env:
#       PROJECT_NAME_UNDERSCORE: another_giblang_impl
#       CARGO_INCREMENTAL: 0
#       RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
#       RUSTDOCFLAGS: -Cpanic=abort
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: nightly
#           override: true
#       - name: Cache dependencies
#         uses: actions/cache@v2
#         env:
#           cache-name: cache-dependencies
#         with:
#           path: |
#             ~/.cargo/.crates.toml
#             ~/.cargo/.crates2.json
#             ~/.cargo/bin
#             ~/.cargo/registry/index
#             ~/.cargo/registry/cache
#             target
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
#       - name: Generate test result and coverage report
#         run: |
#           cargo install cargo2junit grcov;
#           cargo test $CARGO_OPTIONS -- -Z unstable-options --format json | cargo2junit > junit.xml;
#           zip -0 ccov.zip `find . \( -name "$PROJECT_NAME_UNDERSCORE*.gc*" \) -print`;
#           # grcov ccov.zip -s . -t lcov --llvm --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;
#           grcov -s . -t lcov --llvm --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;
#       - name: Upload test results
#         uses: EnricoMi/publish-unit-test-result-action@v2
#         with:
#           check_name: Test Results
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           files: junit.xml
#       - name: Upload test results to Codecov
#         if: ${{ !cancelled() }}
#         uses: codecov/test-results-action@v1
#         with:
#           token: ${{ secrets.CODECOV_TOKEN }}
#       - name: Upload to CodeCov
#         uses: codecov/codecov-action@v1
#         with:
#           token: ${{ secrets.CODECOV_TOKEN }}
#           files: ./lcov.info
#           fail_ci_if_error: true
#
#
#
# name: Rust
#
on:
  pull_request:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
          RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
      - name: rust-grcov
        # You may pin to the exact commit or the version.
        # uses: actions-rs/grcov@bb47b1ed7883a1502fa6875d562727ace2511248
        uses: actions-rs/grcov@v0.1
      - name: Codecov
        # You may pin to the exact commit or the version.
        # uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          # Repository upload token - get it from codecov.io. Required only for private repositories
          # token: # optional
          # Specify whether the Codecov output should be verbose
          verbose: true
          fail_ci_if_error: true
